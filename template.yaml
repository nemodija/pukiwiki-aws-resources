AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-0cc75a8978fbbc969
  InstanceType:
    Type: String
    Default: t2.micro
  SnapshotId:
    Type: String
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1a
  DockerComposeVersion:
    Type: String
    Default: 1.26.2
  Relayhost:
    Type: String
  RelayhostPort:
    Type: String
    Default: 587
  RelayhostUser:
    Type: String
  RelayhostPass:
    Type: String

Resources:
  # ----------------------------------------------------------------------------
  # Networking
  # ----------------------------------------------------------------------------
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.38.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.38.0.0/24
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref AWS::Region
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.38.1.0/24
      AvailabilityZone: !Select
      - 1
      - Fn::GetAZs: !Ref AWS::Region
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

  # ----------------------------------------------------------------------------
  # Compute
  # ----------------------------------------------------------------------------
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        UserData:
          Fn::Base64: !Sub
          - |
            #!/bin/bash
            systemctl disable postfix
            systemctl stop postfix
            yum -y update
            yum -y install docker git
            systemctl enable docker
            systemctl start docker
            sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m`" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            mkdir /wiki
            mount /dev/xvdf /wiki
            echo "$(sudo xfs_admin -u /dev/xvdf | tr -d ' ')     /wiki       xfs    defaults          0   0" >> /etc/fstab
            git clone https://github.com/nemodija/pukiwiki-compose.git
            cd pukiwiki-compose/
            git submodule init
            git submodule update
            curl -L "http://prdownloads.sourceforge.jp/pukiwiki/12957/pukiwiki-1.4.7_notb.tar.gz" -o pukiwiki/pukiwiki-1.4.7_notb.tar.gz
            cat <<EOT > env.yml
            version: "3.5"
            services:
              mail:
                environment:
                  RELAYHOST: "[${RELAYHOST}]:${RELAYHOST_PORT}"
                  MAIL_ADDRESS: ${RELAYHOST_USER}
                  MAIL_PASSWORD: ${RELAYHOST_PASS}
            EOT
            mkdir /var/log/wiki
            mkdir /var/log/mail && chown 101:4 /var/log/mail
            docker-compose -f docker-compose.yml -f env.yml up -d
          - {
              DOCKER_COMPOSE_VERSION: !Ref DockerComposeVersion,
              RELAYHOST: !Ref Relayhost,
              RELAYHOST_PORT: !Ref RelayhostPort,
              RELAYHOST_USER: !Ref RelayhostUser,
              RELAYHOST_PASS: !Ref RelayhostPass
            }
  Instance: 
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      IamInstanceProfile: !Ref IamInstanceProfile
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        SubnetId: !Ref Subnet1
        GroupSet:
        - !Ref SecurityGroup
      KeyName: wiki
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole    
      Description: Allows EC2 instances to call AWS services on your behalf.
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  Volume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !GetAtt Instance.AvailabilityZone
      SnapshotId: !Ref SnapshotId
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref Instance
      VolumeId: !Ref Volume
  LifecyclePolicy:
    Type: AWS::DLM::LifecyclePolicy
    Properties:
      Description: !Sub ${AWS::StackName}
      ExecutionRoleArn: !GetAtt LifecyclePolicyRole.Arn
      PolicyDetails:
        ResourceTypes:
        - VOLUME
        Schedules:
        - Name: !Sub "${AWS::StackName}-daily-snapshot-schedule"
          CreateRule:
            Interval: 24
            IntervalUnit: HOURS
            Times:
            - "15:00"
          RetainRule:
            Count: 3
        TargetTags:
        - Key: Name
          Value: !Ref AWS::StackName
      State: ENABLED
  LifecyclePolicyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: dlm.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSDataLifecycleManagerServiceRole
  # ----------------------------------------------------------------------------
  # Network & Security
  # ----------------------------------------------------------------------------
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: wiki
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: wiki-lb
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
  # ----------------------------------------------------------------------------
  # Load Balancing
  # ----------------------------------------------------------------------------
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /healthcheck.html
      Port: 80
      Protocol: HTTP
      Targets:
      - Id: !Ref Instance
        Port: 80
      TargetType: instance
      VpcId: !Ref Vpc
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
      - !Ref LBSecurityGroup
      Subnets:
      - !Ref Subnet1
      - !Ref Subnet2
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      Port: 80
      Protocol: HTTP

Outputs:
  ManagedInstanceUrl:
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${Instance}?region=${AWS::Region}
  WikiUrl:
    Value: !Sub http://${LoadBalancer.DNSName}
